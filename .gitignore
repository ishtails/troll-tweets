# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# NLP and ML specific
*.pkl
*.joblib
*.h5
*.bin
*.onnx
*.pt
*.pth
models/
saved_models/
embeddings/
word_vectors/
glove*
word2vec*
fasttext*

# Large datasets
*.csv
*.json
*.jsonl
*.parquet
*.arrow
*.txt
!requirements.txt
!sample*.csv
!sample*.json

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.conda/
conda-env/

# IDE specific files
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Logs and results
logs/
results/
wandb/
mlruns/
runs/
tensorboard/

# Cache directories
.cache/
.vector_cache/

# Configuration files with secrets
*config.ini
*secrets*
*credentials*
# Keep the example configs
!*config.example*
!*example_config*
!configs/model_config.yaml

# Twitter API credentials and tokens
twitter_keys.py
twitter_credentials.json
.twitter_keys.yaml
.env.twitter
bearer_token.txt

# NLP specific
corpora/
nltk_data/
spacy_models/
tokenizers/
huggingface/
sentence_transformers/
transformers/
*checkpoint*/
model_checkpoints/
.vector_cache/
.nltk_packages
.spacy_cache
.stanza_resources/
*vocabulary*.txt
*vocab*.txt
*tokenizer*.json

# Serialized objects and intermediate data
*.npy
*.npz
preprocessed/
augmented_data/
features/

# Experiment tracking and visualization
mlruns/
tfevents.*
*.tfevents.*
lightning_logs/
ray_results/
optuna.db
study.pkl
hyperopt/
tune_results/

# GPU and CUDA related
.nv/
*.cublas
*.cudnn
*.curand
*.cusparse
.cache-loader

# Documentation build
docs/_build/
docs/auto_examples/
docs/modules/generated/
docs/api/

# Additional data formats common in NLP projects
*.tsv
*.conll
*.conllu
*.brat
*.ann
*.hdf5
*.hdf
*.h5
*.binary
*.png
*.jpg
*.jpeg
*.gif
*.bmp
*.tiff
*.ico